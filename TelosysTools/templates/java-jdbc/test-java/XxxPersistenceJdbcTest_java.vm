#checkId($entity)
#parse("/include/init_var_entity.vm")
#parse("/include/java_header.vm")
##--------------------------------------------------------------------------------------------------------
#set( $daoClass    = "${entity.name}PersistenceJdbc" )
##
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $keyValues   = $fn.buildValues($entity.keyAttributes,     1) )
#set( $dataValues  = $fn.buildValues($entity.nonKeyAttributes , 1) )
#set( $dataValues2 = $fn.buildValues($entity.nonKeyAttributes , 2) )
#set( $keyValues3  = $fn.buildValues($entity.keyAttributes,     3) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($TEST_SRC)};

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.sql.SQLException;

import ${recordPackage}.${recordClass} ;
import ${ROOT_PKG}.persistence.$persistenceInterface ;
import ${ROOT_PKG}.persistence.impl.jdbc.commons.DAOTestUtil;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * JUnit tests for ${entity.name} persistence
 * 
 * @author Telosys
 *
 */
public class ${entity.name}PersistenceJdbcTest {

#set( $createTableLines = $h2.ddlCreateTable($entity) )

	private static final String CREATE_TABLE = 
#foreach( $line in $createTableLines )
			#if ( $foreach.count > 1 )+#end "${line}"
#end 
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE, "${entity.sqlTableName}") ;
	}

	private void log(String message) {
		System.out.println(message);
	}

	@Test
	public void testPersistenceService() {

    	$persistenceInterface persistenceService = new ${jdbcServiceClass}();

#if ( $entity.hasAutoIncrementedKey() )
    	testPersistenceServiceWithAutoincrementedKey(persistenceService);
#else
    	testPersistenceService(persistenceService);
#end
	}
##--------------------------------------------------------------------------------------------------------
#macro( checkSameData $instance1 $instance2 )
		// Check same data in the reloaded instance
#foreach( $attribute in $entity.nonKeyAttributes )
#if($attribute.type == "BigDecimal")
		assertTrue(${instance1}.${attribute.getter}().compareTo( ${instance2}.${attribute.getter}() ) == 0 );  // BigDecimal => use 'compareTo'
#else
#if($attribute.neutralType == "timestamp")
		//assertEquals(${instance1}.${attribute.getter}(), ${instance2}.${attribute.getter}() ); // Cannot test timestamp (different class in initial value) 
#else
		assertEquals(${instance1}.${attribute.getter}(), ${instance2}.${attribute.getter}() ); 
#end
#end
#end
#end
##--------------------------------------------------------------------------------------------------------
#macro( initData $name)
		// Set initial values ( auto-incremented key : nothing to set in the Primary Key )
#foreach( $attribute in $entity.nonKeyAttributes )
		${name}.${attribute.setter}($dataValues.getValue($attribute.name)); // $attribute.fullType
#end
#end
##--------------------------------------------------------------------------------------------------------

##----------------------------------------------------------------------------------------
##  ========== TEST CASE FOR STANDARD KEY ( NOT AUTO-INCREMENTED ) ========== 
##----------------------------------------------------------------------------------------
#if ( $entity.hasAutoIncrementedKey() == false )
	/**
	 * Test for a record with a classic primary key (not auto-incremented)
	 * @param persistenceService
	 * @throws SQLException
	 */
	public void testPersistenceService(${persistenceInterface} persistenceService) {
    	log("--- test ${persistenceInterface} ");

    	${recordClass} $recordInstance = new ${recordClass}();
##-----------------------------------------------------------------------------
		//--- Key values
#foreach( $attribute in $entity.keyAttributes )
		${recordInstance}.${attribute.setter}($keyValues.getValue($attribute.name)); // $attribute.fullType
#end
		//--- Other values
#foreach( $attribute in $entity.nonKeyAttributes )
		${recordInstance}.${attribute.setter}($dataValues.getValue($attribute.name)); // $attribute.fullType
#end
##-----------------------------------------------------------------------------

    	//--- DELETE
    	log("Delete : " + ${recordInstance} );
    	persistenceService.delete(${recordInstance}) ; // Just to be sure it doesn't exist before insert

		long initialCount = persistenceService.countAll() ;
    	log("Initial count = " + initialCount );

    	//--- CREATE
    	log("Create : " + ${recordInstance} );
    	persistenceService.create(${recordInstance});
    	assertTrue( persistenceService.exists($keyValues.allValues) );

		assertTrue( persistenceService.exists($recordInstance) );
		long count = persistenceService.countAll() ;
    	log("Count = " + count );
		assertEquals(initialCount+1, count );

    	//--- FIND
    	log("Find by id..." );
    	${recordClass} ${recordInstance}2 = persistenceService.findById($keyValues.allValues);

    	log("Found : " + ${recordInstance}2 );
    	assertNotNull(${recordInstance}2);
#foreach( $attribute in $entity.keyAttributes )
		assertTrue( $keyValues.comparisonStatement("${recordInstance}2", $attribute) ) ;
#end
    	assertTrue( persistenceService.exists(${recordInstance}2) ) ;
    	
#if ( $entity.nonKeyAttributesCount > 0 )
    	//--- UPDATE
		//--- Change values
#foreach( $attribute in $entity.nonKeyAttributes )
		${recordInstance}2.${attribute.setter}($dataValues2.getValue($attribute.name)); // $attribute.fullType
#end
    	log("Update : " + ${recordInstance}2 );
    	assertTrue( persistenceService.update(${recordInstance}2) );
#else
    	//--- NO UPDATE FOR THIS ENTITY (ALL COLUMNS IN PRIMARY KEY)
#end
    	
    	//--- RELOAD AFTER UPDATE
    	log("Find by id..." );
    	${recordClass} ${recordInstance}3 = persistenceService.findById($keyValues.allValues);
    	assertNotNull(${recordInstance}3);
    	log("Found : " + ${recordInstance}3 );
#checkSameData("${recordInstance}2", "${recordInstance}3" )

    	//--- DELETE
    	log("Delete : " + ${recordInstance}2 );
    	assertTrue( persistenceService.delete(${recordInstance}2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(${recordInstance}2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById($keyValues.allValues) ); // Nothing (already deleted)

		long finalCount = persistenceService.countAll() ;
    	log("Final count = " + finalCount );
		assertEquals(initialCount, finalCount);

    	assertFalse( persistenceService.exists($keyValues.allValues) ) ;
    	assertFalse( persistenceService.exists(${recordInstance}2) ) ;
    	${recordInstance}2 = persistenceService.findById($keyValues.allValues);
    	assertNull( ${recordInstance}2 );
    	
    	log("Normal end of persistence service test." );
	}
#end
##----------------------------------------------------------------------------------------
##  ========== TEST CASE FOR AUTO-INCREMENTED KEY ========== 
##----------------------------------------------------------------------------------------
#if ( $entity.hasAutoIncrementedKey() )
	/**
	 * Test for a record with an auto-incremented primary key
	 * @param persistenceService
	 * @throws SQLException
	 */
	public void testPersistenceServiceWithAutoincrementedKey(${persistenceInterface} persistenceService) {
    	log("--- test ${persistenceInterface} ");

		long initialCount = persistenceService.countAll() ;
    	log("Initial count = " + initialCount );

    	//--- CREATE #1
    	${recordClass} record = new ${recordClass}();
#initData("record")
    	log("Create : " + record);
    	persistenceService.create(record);
		// Retrieve the generated id 
		$entity.autoincrementedKeyAttribute.type generatedId = record.${entity.autoincrementedKeyAttribute.getter}() ;
    	log("Generated id #1 = " + generatedId ); 
    	assertTrue( persistenceService.exists(generatedId) );
		assertTrue( persistenceService.exists(record) );
		long count = persistenceService.countAll() ;
    	log("Count = " + count );
		assertEquals(initialCount+1, count );

    	//--- CREATE #2
		record = new ${recordClass}();  // A new instance is mandatory for JPA 
#initData("record")
		persistenceService.create(record);
		// Retrieve the generated id 
		$entity.autoincrementedKeyAttribute.type generatedId2 = record.${entity.autoincrementedKeyAttribute.getter}() ;
    	log("Generated id #2 = " + generatedId2 ); 
    	$entity.autoincrementedKeyAttribute.type nextId = generatedId ; nextId++ ;
		assertEquals(nextId, generatedId2 );

    	//--- CREATE #3
		record = new ${recordClass}();  // A new instance is mandatory for JPA 
#initData("record")
		persistenceService.create(record);
		// Retrieve the generated id 
		$entity.autoincrementedKeyAttribute.type generatedId3 = record.${entity.autoincrementedKeyAttribute.getter}() ;
    	log("Generated id #3 = " + generatedId3 ); 
    	$entity.autoincrementedKeyAttribute.type nextId2 = generatedId2 ; nextId2++ ;
		assertEquals(nextId2, generatedId3 );

    	//--- FIND #1
    	log("Find by id #1 ..." );
    	${recordClass} record1 = persistenceService.findById(generatedId);
    	log("Found : " + record1 );
    	assertNotNull(record1);
    	assertTrue( persistenceService.exists(record1) ) ;

    	//--- FIND #2
    	log("Find by id #2 ..." );
    	${recordClass} record2 = persistenceService.findById(generatedId2);
    	log("Found : " + record2 );
    	assertNotNull(record2);
    	assertTrue( persistenceService.exists(record2) ) ;

#if ( $entity.nonKeyAttributesCount > 0 )
    	//--- UPDATE
		//--- Change values
#foreach( $attribute in $entity.nonKeyAttributes )
		record2.${attribute.setter}($dataValues2.getValue($attribute.name)); // $attribute.fullType
#end
    	log("Update : " + record2 );
    	assertTrue( persistenceService.update(record2) );
#else
    	//--- NO UPDATE FOR THIS ENTITY (ALL COLUMNS IN PRIMARY KEY)
#end

    	//--- RELOAD AFTER UPDATE
    	log("Find by id..." );
    	${recordClass} record2reloaded = persistenceService.findById(generatedId2);
    	assertNotNull(record2reloaded);
    	log("Found : " + record2reloaded );
#checkSameData( "record2", "record2reloaded" )

    	//--- DELETE
    	log("Delete : " + record2 );
    	assertTrue(  persistenceService.delete(record2) ); // First delete : OK
    	assertFalse( persistenceService.delete(record2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById(generatedId2) ); // Nothing (already deleted)

	}
#end

}
