#checkId($entity)
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")
package ${target.javaPackageFromFolder($SRC)};

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

## import javax.inject.Named;

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import ${recordPackage}.${recordClass} ;
import ${ROOT_PKG}.persistence.${entity.name}Persistence;
import ${ROOT_PKG}.persistence.impl.jdbc.commons.GenericJdbcDAO;

#set( $jdbc = $jdbcFactory.getInstance($entity) )
/**
 * ${entity.name} persistence implementation 
 * 
 * @author Telosys
 *
 */
## @Named("${entity.name}Persistence")
public class ${entity.name}PersistenceJdbc extends GenericJdbcDAO<${recordClass}> implements ${entity.name}Persistence {

	private final static String SQL_SELECT_ALL = 
		"$jdbc.sqlSelect"; 

	private final static String SQL_SELECT = 
		"$jdbc.sqlSelectWherePK";

	private final static String SQL_INSERT = 
		"$jdbc.sqlInsert";

	private final static String SQL_UPDATE = 
#if ( $entity.nonKeyAttributesCount > 0 )
		"$jdbc.sqlUpdate";
#else
		"";
		// NO DATA => INVALID UPDATE SQL STATEMENT : 
		// "$jdbc.sqlUpdate"
		// UPDATE IS NOT SUPPOSED TO BE USED FOR THIS ENTITY
#end

	private final static String SQL_DELETE = 
		"$jdbc.sqlDelete";

	private final static String SQL_COUNT_ALL = 
		"$jdbc.sqlSelectCount";

	private final static String SQL_COUNT = 
		"$jdbc.sqlSelectCountWherePK";

	/**
	 * Constructor
	 */
	public ${entity.name}PersistenceJdbc() {
		super();
	}

	@Override
	protected void setAutoIncrementedKey(${recordClass} record, long value) {
#if( $entity.hasAutoIncrementedKey() )
		record.${entity.autoincrementedKeyAttribute.setter}((${entity.autoincrementedKeyAttribute.type})value);
#else
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
#end
	}

	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, ${recordClass} $recordInstance) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
		setValue(ps, i++, ${recordInstance}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
#end
	}

	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, ${recordClass} $recordInstance) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
#foreach( $attribute in $entity.attributes )
#if ( $attribute.isAutoIncremented() )
		// "${attribute.databaseName}" is auto-incremented => no set in insert		
#end#end
#foreach( $attribute in $jdbc.attributesForInsert )
		setValue(ps, i++, ${recordInstance}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
#end
	}

	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, ${recordClass} $recordInstance) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
#foreach( $attribute in $jdbc.attributesForUpdate )
		setValue(ps, i++, ${recordInstance}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
#end
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
		setValue(ps, i++, ${recordInstance}.${attribute.getter}() ) ; // "$attribute.databaseName" : $attribute.fullType
#end
	}

	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
	 * @param ${attribute.name};
#end
	 * @return the new instance
	 */
	private ${recordClass} newInstanceWithPrimaryKey( $fn.argumentsListWithWrapperType( $jdbc.attributesForPrimaryKey ) ) {
		${recordClass} $recordInstance = new ${recordClass}();
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
		${recordInstance}.${attribute.setter}( ${attribute.name} );
#end
		return $recordInstance ;
	}

	@Override
	protected ${recordClass} newInstance() {
		return new ${recordClass}() ;
	}

	@Override
	protected ${recordClass} populateBean(ResultSet rs, ${recordClass} $recordInstance) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
#foreach( $attribute in $jdbc.attributesForSelect)
#set( $method = "get${attribute.simpleType}(rs, ${QUOT}${attribute.sqlColumnName}${QUOT})" )
		${recordInstance}.${attribute.setter}($method); // $attribute.fullType
#if ( $attribute.isNumberType() && $attribute.isPrimitiveType() == false )
		if ( rs.wasNull() ) { ${recordInstance}.${attribute.setter}(null); }; // not primitive number => keep null value if any
#end
#end
		return $recordInstance ;
	}

	@Override
	public ${recordClass} findById( $fn.argumentsListWithWrapperType( $jdbc.attributesForPrimaryKey ) ) {
		${recordClass} $recordInstance = newInstanceWithPrimaryKey( $fn.argumentsList($jdbc.attributesForPrimaryKey) ) ;
		if ( super.doSelect($recordInstance) ) {
			return $recordInstance ;
		}
		else {
			return null ; // Not found
		}
	}

	@Override
	public List<${recordClass}> findAll() {
		return super.doSelectAll();
	}

	/**
	 * Loads the given record, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param $recordInstance
	 * @return true if found, false if not found
	 */
	public boolean load( ${recordClass} $recordInstance ) {
		return super.doSelect($recordInstance) ;
	}

	/**
	 * Inserts the given bean in the database 
	 * @param $recordInstance
	 */
	public long insert(${recordClass} ${recordInstance}) {
#if ( $entity.hasAutoIncrementedKey() )
		Long key = super.doInsertAutoIncr($recordInstance);
		return key.longValue();
#else
		super.doInsert($recordInstance);
		return 0L ;
#end
	}

	@Override
	public ${recordClass} create(${recordClass} ${recordInstance}) {
		insert($recordInstance);
#if ( $entity.hasAutoIncrementedKey() )
#else
#end 
		return ${recordInstance} ;
	}	

	@Override
##	public ${recordClass} update(${recordClass} $recordInstance) {
	public boolean update(${recordClass} $recordInstance) {
#if ( $entity.nonKeyAttributesCount > 0 )
##		//int r = super.doUpdate($recordInstance);
##		super.doUpdate($recordInstance);
##		return $recordInstance ;
		int r = super.doUpdate($recordInstance);
		return r > 0 ;

#else
		throw new RuntimeException("No update for this entity (no data, only Primary Key)");
#end
	}	

	@Override
	public ${recordClass} save(${recordClass} $recordInstance) {
		if ( super.doExists($recordInstance) ) {
			super.doUpdate($recordInstance);
		}
		else {
			super.doInsert($recordInstance);
		}
		return $recordInstance ;
	}	

	@Override
	public boolean deleteById( $fn.argumentsListWithWrapperType( $jdbc.attributesForPrimaryKey ) ) {
		${recordClass} $recordInstance = newInstanceWithPrimaryKey( $fn.argumentsList($jdbc.attributesForPrimaryKey) ) ;
		int r = super.doDelete($recordInstance);
		return r > 0 ;
	}

	@Override
	public boolean delete( ${recordClass} $recordInstance ) {
		int r = super.doDelete($recordInstance);
		return r > 0 ;
	}

	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
	 * @param ${attribute.name};
#end
	 * @return
	 */
	public boolean exists( $fn.argumentsListWithWrapperType( $jdbc.attributesForPrimaryKey ) ) {
		${recordClass} $recordInstance = newInstanceWithPrimaryKey( $fn.argumentsList($jdbc.attributesForPrimaryKey) ) ;
		return super.doExists($recordInstance);
	}

	/**
	 * Checks the existence of the given bean in the database 
	 * @param $recordInstance
	 * @return
	 */
	public boolean exists( ${recordClass} $recordInstance ) {
		return super.doExists($recordInstance);
	}

	@Override
	public long countAll() {
		return super.doCountAll();
	}

	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}

	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}

	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}

	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}

	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}

	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}

	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
